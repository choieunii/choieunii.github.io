---
layout: post
title:  SOLID 원칙 정리
tags: [SOLID, DesignPattern]
---

### SOLID 원칙 정리

### S : SRP(Single Repository Principle)
### O : OCP(Open-Closed Principle)
### L : LSP(Liskov Substitution Principle)
### I : ISP(Interface Segregation Principle)
### D : DIP(Dependency Inversion Principle)     

    
### SRP (Single Repository principle)
- 객체는 단 하나의 책임만 가져야 한다.
- 하나의 클래스에 너무 많은 메소드가 있으면 안된다.   

책임 분리 ?
단 하나의 책임 부여로 변경 사유가 될 수 있는 것을 하나로 만들어야 한다.

산탄총 수술 ?
하나의 책임이 여러개의 클래스들로 분산도어 있는 경우에도 단일 책임 원칙에 입각해 설계를 변경해야 하는 경우도 있다.
이때 산탄총 수술이라는 단어를 사용한다. 어떤 변경이 있을때 하나가 아닌 여러 클래스를 변경해야 한다는 점에서 착안하였다.

책임 분리의 예시 - 횡단 관심
   
    
### OCP (Open-Closed Principle)
- 기존의 코드를 변경하지 않으면서 기능을 추가할 수 있도록 설계가 되어야 한다.

    
### LSP (Liskov Substitution Principle)
- 자식 클래스는 최소한 자신의 부모 클래스에서 가능한 행위는 수행할 수 있어야 한다.
- 부모클래스와 자식클래스 사이는 행위가 일관되어야 한다.

일반화의 관계를 생각해볼때 일반화는 'is a kind of 관계'라 한다.
예를들어, 
- 포유류는 알을 낳지 않고 새끼를 낳아 번식한다.
- 포유류는 젖을 먹여서 새끼를 키우고 폐를 통해 호흡한다.
- 포유류는 체온이 일정한 정온 동물이며 털이나 두꺼운 피부로 덮여있다.

이와 같은 특징 들을 포유류에서 오리너구리로 바꾸었을때, 오리너구리는 알을 낳아 번식을 하기 때문에 해당되지 않는다. 
is a kind of 관계 설명은 LSP를 만족하지 않는다.

- LSP를 만족하기 위해서는 재정의 하지 않는다.
    
      
### DIP (Dependency Inversion Principle)
- 의존 역전의 원칙
- 변화하기 쉬운 것, 자주 변화하는 것보다는 변화하기 어려운 것, 거의 변화가 없는 것에 의존하라는 원칙이다.
- 만족하기 위해서는 구체적인 클래스보다 인터페이스나 추상클래스와 의존 관계를 맺도록 설계해야한다.

의존성 주입?
클래스 외부에서 의존되는 것을 대상 객체의 인스턴스 변수에 주입하는 기술

  
     
### ISP (Interface Segregation Principle)
- 클라이언트 자신이 이용하지 않는 기능에는 영향을 받지 않아야 한다.
- 클라이언트에 특화 되도록 분리하라


