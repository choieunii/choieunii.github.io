---
layout: post
title:  디자인 패턴
tags: [DesignPattern]
---

### 디자인 패턴이란?
#### 소프트웨어를 설계할 때 특정 맥락에서 발생하는 고질적인 문제들이 또 발생했을 때 재사용 가능한 훌륭한 해결책      


* 일반적인 설계문제를 해결하기 위하여 짜여진 상호 협력하는 객체들 과 클래스 들에 대한 기술[GoF]
* 자주 발생하는 설계상의 문제를 해결하기 위한 반복적인 해법 [Smalltalk Companion]
* 반복되는 구조를 설계할 때 설계를 재활용하는데 초점을 두는데 비하 여 프레임워크는 세부 설계와 구현에 초점을 두고 있다[Coplien & Schmidt]      


#### 디자인 패턴의 구조는 context, problem, solution 이라는 3개의 필수적인 요소로 구성   

* context : 문제가 발생하는 여러 상황을 기술. 즉, 패턴이 적용될 수 있는 상황을 나타낸다. 경우에 따라서는 패턴이 유용하지 못한 상황을 나타내기도 한다.
* problem : 패턴이 적용되어 해결될 필요가 있는 여러 디자인 이슈들을 기술한다. 이때 여러 제약 사항과 영향력도 문제 해결을 위해 고려해야 한다.
* solution : 문제를 해결하도록 설계를 구성하는 요소들과 그 요소들 사이의 관계, 책임, 협력 관계를 기술한다. 해결은 반드시 구체적인 구현 방법이나 언어에 의존적이지 않으며 다양한 상황에 적용할 수 있는 일종의 템플릿이다.

#### 패턴은 공통의 언어를 만들어 의사소통을 원활하게 한다.

#### GOF 디자인 패턴   

|     |생성 패턴|구조 패턴|행위 패턴|
|-------------------|-------------------|-------------------|-------------------|
|패턴이름|추상 팩토리|어댑터|책임 연쇄|
|    |빌더|브리지|커맨드|
|   |팩토리 메서드|컴퍼지트|인터프리터|
|   |프로토타입|데커레이터|이터레이터|
|   |싱글턴|퍼사드|미디에이터|
|   ||플라이웨이트|메멘토|
|   ||프록시|옵서버|
|   |||스테이트|
|   |||스트래티지|
|   |||템플릿 메서드|
|   |||비지터|
